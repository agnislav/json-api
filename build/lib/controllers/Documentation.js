// Generated by LiveScript 1.2.0
(function(){
  var Q, templating, jade, path, DocumentationController;
  Q = require('q');
  templating = require('url-template');
  jade = require('jade');
  path = require('path');
  DocumentationController = (function(){
    DocumentationController.displayName = 'DocumentationController';
    var prototype = DocumentationController.prototype, constructor = DocumentationController;
    function DocumentationController(registry, apiInfo, templatePath){
      var data, i$, ref$, len$, type;
      this.registry = registry;
      this.apiInfo = apiInfo;
      this.template = templatePath || path.resolve(__dirname, '../../../templates/documentation.jade');
      data = this.apiInfo;
      data.resourcesMap = {};
      for (i$ = 0, len$ = (ref$ = this.registry.types()).length; i$ < len$; ++i$) {
        type = ref$[i$];
        if (type !== "errors") {
          data.resourcesMap[type] = this.getTypeInfo(type);
        }
      }
      this.templateData = data;
    }
    prototype.index = function(req, res){
      return res.send(jade.renderFile(this.template, this.templateData));
    };
    prototype.getTypeInfo = function(type){
      var adapter, modelName, model, info, schema, path, fieldInfo, ref$, parentType, childTypes, defaultIncludes, x$;
      adapter = this.registry.adapter(type);
      modelName = adapter.constructor.getModelName(type, adapter.inflector.singular);
      model = adapter.getModel(modelName);
      info = this.registry.info(type);
      schema = adapter.constructor.getStandardizedSchema(model);
      for (path in schema) {
        fieldInfo = schema[path];
        if ((info != null ? (ref$ = info.fields) != null ? ref$[path] : void 8 : void 8) != null) {
          schema.description = info.fields[path];
        }
      }
      parentType = this.registry.parentType(type);
      childTypes = adapter.constructor.getChildTypes(model, adapter.inflector.plural);
      defaultIncludes = this.registry.defaultIncludes(type);
      x$ = {};
      x$['name'] = modelName;
      x$['schema'] = schema;
      if (defaultIncludes != null) {
        x$['defaultIncludes'] = defaultIncludes;
      }
      if ((info != null ? info.example : void 8) != null) {
        x$['example'] = info.example;
      }
      if ((info != null ? info.description : void 8) != null) {
        x$['description'] = info.description;
      }
      x$['childTypes'] = childTypes;
      x$['parentType'] = parentType;
      return x$;
    };
    return DocumentationController;
  }());
  module.exports = DocumentationController;
}).call(this);
