// Generated by LiveScript 1.2.0
(function(){
  var Resource, Error;
  Resource = require('./Resource');
  Error = (function(){
    Error.displayName = 'Error';
    var prototype = Error.prototype, constructor = Error;
    function Error(id, attrs, links, href){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.links = links;
      this$.href = href;
      Error.superclass.call(this$, "errors", id, attrs, this$.links, this$.href);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._coerceAttrs = function(attrs){
      if (attrs != null) {
        ["code", "status"].forEach(function(it){
          if (attrs[it] != null) {
            return attrs[it] = String(attrs[it]).toString();
          }
        });
      }
      return attrs;
    };
    /**
     * Creates a JSON-API Compliant Error Object from a JS Error object
     *
     * Note: the spec allows error objects to have arbitrary properties 
     * beyond the ones for which it defines a meaning (ie. id, href, code,
     * status, path, etc.), but this function strips out all such properties
     * in order to offer a neater result (as JS error objects often contain
     * all kinds of crap).
     */;
    Error.fromError = function(err){
      var attrs;
      attrs = {
        status: err.status || err.statusCode || 500,
        detail: err.message
      };
      ["code", "title", "path"].forEach(function(it){
        if (err[it] != null) {
          return attrs[it] = err[it];
        }
      });
      return new this(err.id, attrs, err.links, err.href);
    };
    return Error;
  }());
  module.exports = ErrorResource;
}).call(this);
