doctype html
html(lang='en')
  head
    block title
      title= name + ' Documentation'

    block styles

    block scripts
      script(src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js")
      script
        include ConditionalSection.js

  body
    #docs
      #intro
        block intro
          h1= name + ' Documentation'


      mixin resource-doc(modelInfo, type)
        section(id="resources-"+type)
          h3(class=(modelInfo.description ? "with-p" : ""))= modelInfo.name
          if modelInfo.description
            p= modelInfo.description
          if modelInfo.parentType
            p.
              <code>#{modelInfo.name}</code> resources extend <a href="#resources-#{modelInfo.parentType}"><code>#{resourcesMap[modelInfo.parentType].name}</code></a>
              resources, meaning they have all the same fields and requirements. The fields shown below are only the <em>additional</em> fields
              that <code>#{modelInfo.name}</code> resources have but <code>#{resourcesMap[modelInfo.parentType].name}</code> resources don&rsquo;t.

          if modelInfo.example
            .conditional-section
              .toggle Show example representation
              .contents
                code
                  pre= modelInfo.example

          //allow subtemplates to stick in sections before the fields.
          block fieldsPrepend

          if modelInfo.schema
            h4 Fields
            table
              thead: tr 
                  th Field Name
                  th Type
                  th Description

              //move id to the top for display
              - var orderedFields = Object.keys(modelInfo.schema)
              - var idIndex = orderedFields.indexOf('id');
              - orderedFields.splice(idIndex, 1)
              - orderedFields = ['id'].concat(orderedFields)

              each path in orderedFields
                - var field = modelInfo.schema[path]
                - var fieldId = "resources-"+type+'-'+path
                if !modelInfo.parentType || !resourcesMap[modelInfo.parentType].schema[path] 
                  tr
                    td
                      if field.required
                        b(id=fieldId)= path
                      else
                        span(id=fieldId)= path
                    td= field.type
                    td
                      != field.description
                      if (field.default != null && path != 'id') || field.enumValues != null
                        dl
                          if field.enumValues != null
                            dt Allowed Values
                            dd= field.enumValues.join(', ')
                          if field.default != null && path != 'id'
                            dt Default Value
                            dd= field.default

            //allow subtemplates to add content after the fields
            block fieldsAppend

      section#overview
        block overview
          h2.with-p Usage Overview
          p.
            This API is compliant with the <a href="http://jsonapi.org/">JSON API</a> specification, which
            defines conventions for listing, reading, creating, updating, and deleting resources. When fetching
            a resource or resources, the spec also offers conventions for: <a href="http://jsonapi.org/format/#fetching-sorting">
            sorting the returned resources</a>, <a href="http://jsonapi.org/format/#fetching-sparse-fieldsets">
            limiting the fields returned in each resource</a>, <a href="http://jsonapi.org/format/#fetching-includes">
            including linked resources</a> to form <a href="http://jsonapi.org/format/#document-structure-compound-documents">
            compound documents</a>, etc. Accordingly, these features of the #{name} aren&rsquo;t redocumented here; 
            simply see the JSON API <a href="http://jsonapi.org/format">spec</a> to learn how to use them.

          section
            h3.with-p Unsupported JSON API features
            p.
              This implementation of JSON API does not allow clients to set a resource&rsquo;s id; any attempt to
              do so will be  silently ignored, with the server-generated id being used instead. This implementation
              also does not yet support <code class="http-method">PATCH</code> operations of any kind or using
              <a href="http://jsonapi.org/format/#urls-relationships">relationship endpoints</a>.  

      section#resources
        h2 Resource Types
        each modelInfo, type in resourcesMap
          //find the root nodes
          if !modelInfo.parentType
            +resource-doc(modelInfo, type)
            each subType in modelInfo.childTypes
              +resource-doc(resourcesMap[subType], subType)

      section#footer
        block footer

    nav
      ul
        li: a(href="#intro") Introduction
        li: a(href="#overview") Usage Overview
        li
          h3.h4 Resource Types
          ul
            each modelInfo, type in resourcesMap
              if !modelInfo.parentType
                li
                  a(href=("#resources-" + type))= modelInfo.name
                  if modelInfo.childTypes.length > 0
                    ul
                      each subType in modelInfo.childTypes
                        li: a(href=("#resources-" + subType))= resourcesMap[subType].name